#ifndef IOP_DRIVER_CERTSTORE_HPP
#define IOP_DRIVER_CERTSTORE_HPP

#include <stdint.h>

namespace driver {

/// Individual certificate structure.
/// Contains certificate array, its size. And its hash.
///
/// Points to IOP_ROM data
struct Cert {
  uint16_t size;
  const uint8_t *index;
  const uint8_t *cert;

  constexpr Cert(const uint8_t *cert, const uint8_t *index, const uint16_t size) noexcept:
    size(size), index(index), cert(cert) {}
};

/// Abstracts hardcoded certificates. The instantiation should be auto-generated by the build script.
///
/// The script downloads certificates and generates a header file with them (/include/generated/certificates.hpp)
///
/// _Only_ pass pointers _from_ the IOP_ROM to this class
///
/// Pointer's are just borrowed, this structure _must_ outlive the storage.
///
/// Install it with `CertStore::setCertList(...)`
/// The device will panic if the cert store is not installed
class CertList {
  const uint16_t *sizes;
  const uint8_t *const *indexes;
  const uint8_t *const *certs;
  uint16_t numberOfCertificates;

public:
  CertList(const uint8_t *const *certs, const uint8_t *const *indexes,
           const uint16_t *sizes, uint16_t numberOfCertificates) noexcept:
      sizes(sizes), indexes(indexes), certs(certs),
      numberOfCertificates(numberOfCertificates) {}

  auto cert(uint16_t index) const noexcept -> Cert;
  auto count() const noexcept -> uint16_t;
};

class InternalCertStore;

/// TLS certificate storage to be installed into BearSSL::WiFiClientSecure. You must construct it from the
/// certs generated by the build script. Check the (build/preBuildCertificates.py)
///
/// It should be stored in static memory. It's not copyable, nor movable.
struct CertStore {
  InternalCertStore *internal;

  explicit CertStore(CertList list) noexcept;

  CertStore(CertStore const &other) noexcept = delete;
  CertStore(CertStore &&other) noexcept = delete;
  auto operator=(CertStore const &other) noexcept -> CertStore & = delete;
  auto operator=(CertStore &&other) noexcept -> CertStore & = delete;
  ~CertStore() noexcept;
};
}

#endif